import groovy.json.JsonSlurper
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'

group = 'host.exp.exponent'
version = '0.8.2'

// reanimated v2
def reactNativeFilePath = ["node", "--print", "require.resolve('react-native/package.json')"].execute().text.trim()
def inputFile = new File(reactNativeFilePath)
def json = new JsonSlurper().parseText(inputFile.text)
def reactNativeVersion = json.version as String
def (major, minor, patch) = reactNativeVersion.tokenize('.')

def engine = "jsc"

// If the user has the reanimated 2.2.1 or above installed, we don't have to swap JNI implementation.
def shouldSwapJNI() {
  def reanimatedPackagePath = ["node", "--print", "require.resolve('react-native-reanimated/package.json')"].execute().text.trim()
  if (!reanimatedPackagePath) {
    return true
  }

  def inputFile = new File(reanimatedPackagePath)
  def json = new JsonSlurper().parseText(inputFile.text)
  def reanimatedVersion = json.version as String
  def (int major, int minor, int path) = reanimatedVersion.tokenize('.').collect { it.toInteger() }

  if (major < 2 || (major == 2 && minor <= 2 && path == 0)) {
    return true
  }

  return !rootProject.findProject(":react-native-reanimated")
}

abstract class replaceSoTask extends DefaultTask {
  public static String appName = ":app"
  public static String buildDir = "../../../android/app/build"

  @TaskAction
  def run() {
    for (def abiVersion in ["x86", "x86_64", "armeabi-v7a", "arm64-v8a"]) {
      ant.sequential {
        copy(
            tofile: "${buildDir}/intermediates/merged_native_libs/debug/out/lib/${abiVersion}/libfbjni.so",
            file: "../vendored/react-native-reanimated/libSo/fbjni/jni/${abiVersion}/libfbjni.so",
            overwrite: true
        )
      }
    }
  }
}

def getCurrentFlavor() {
  Gradle gradle = getGradle()
  String taskRequestName = gradle.getStartParameter().getTaskRequests().toString()
  Pattern pattern

  if (taskRequestName.contains("assemble")) {
    pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
  } else {
    pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
  }
  Matcher matcher = pattern.matcher(taskRequestName)

  if (matcher.find()) {
    return matcher.group(1).toLowerCase()
  }
  return ""
}

def replaceSoTaskDebug
def replaceSoTaskRelease

if (Integer.parseInt(minor) < 65 && shouldSwapJNI()) {
  println("DevMenu will replace JNI library.")

  tasks.register("replaceSoTaskDebug", replaceSoTask)
  tasks.register("replaceSoTaskRelease", replaceSoTask)
  replaceSoTaskDebug = project.getTasks().getByPath(":expo-dev-menu:replaceSoTaskDebug")
  replaceSoTaskRelease = project.getTasks().getByPath(":expo-dev-menu:replaceSoTaskRelease")
}

rootProject.getSubprojects().forEach({ project ->
  if (project.plugins.hasPlugin("com.android.application")) {
    if (project.ext.react.enableHermes) {
      engine = "hermes"
    }

    if (project.getProperties().get("android") && Integer.parseInt(minor) < 65 && shouldSwapJNI()) {
      def projectProperties = project.getProperties()
      if (!projectProperties.get("reanimated")
          || (projectProperties.get("reanimated") && projectProperties.get("reanimated").get("enablePackagingOptions"))
      ) {
        def flavorString = getCurrentFlavor()
        replaceSoTask.appName = project.getProperties().path
        replaceSoTask.buildDir = project.getProperties().buildDir
        def appName = project.getProperties().path

        replaceSoTaskDebug.dependsOn(
            project.getTasks().getByPath("${appName}:merge${flavorString}DebugNativeLibs"),
            project.getTasks().getByPath("${appName}:strip${flavorString}DebugDebugSymbols")
        )
        project.getTasks().getByPath("${appName}:package${flavorString}Debug").dependsOn(replaceSoTaskDebug)

        replaceSoTaskRelease.dependsOn(
            project.getTasks().getByPath("${appName}:merge${flavorString}ReleaseNativeLibs"),
            project.getTasks().getByPath("${appName}:strip${flavorString}ReleaseDebugSymbols")
        )
        project.getTasks().getByPath("${appName}:package${flavorString}Release").dependsOn(replaceSoTaskRelease)
      }
    }
  }
})

// end of reanimated v2

buildscript {
  // Simple helper that allows the root project to override versions declared by this library.
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${safeExtGet('kotlinVersion', '1.4.21')}")
  }
}

// Upload android library to maven with javadoc and android sources
configurations {
  deployerJars
}

// Creating sources with comments
task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

// Put the androidSources and javadoc to the artifacts
artifacts {
  archives androidSourcesJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: mavenLocal().url)
    }
  }
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 30)

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 30)
    versionCode 10
    versionName '0.8.2'
  }
  lintOptions {
    abortOnError false
  }

  buildTypes {
    releaseWithDevMenu {
      initWith release
      matchingFallbacks = ['release', 'debug']
    }
  }

  sourceSets {
    main {
      java {
        srcDirs += ['../vendored/react-native-gesture-handler/android/']
      }
    }

    releaseWithDevMenu {
      setRoot 'src/debug'
    }
  }
}

task copyAssets(type: Copy) {
  from('../assets') {
    exclude "*.ios.*"
  }
  into 'src/main/assets'
}

project.afterEvaluate {
  packageDebugAssets.dependsOn copyAssets
  packageReleaseWithDevMenuAssets.dependsOn copyAssets
}

repositories {
  // ref: https://www.baeldung.com/maven-local-repository
  mavenLocal()
  maven {
    // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
    url "$rootDir/../node_modules/react-native/android"
  }
  maven {
    // Android JSC is installed from npm
    url "$rootDir/../node_modules/jsc-android/dist"
  }
}

dependencies {
  implementation files("../vendored/react-native-reanimated/android/devmenu-react-native-reanimated-${minor}-${engine}.aar")

  implementation project(":expo-dev-menu-interface")

  implementation 'com.squareup.okhttp3:okhttp:3.14.9'
  implementation 'com.google.code.gson:gson:2.8.6'

  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'
  implementation "androidx.transition:transition:1.1.0" // use by react-native-reanimated

  // Fixes
  // Cannot access 'androidx....' which is a supertype of 'expo.modules.devmenu.DevMenuActivity'.
  // Check your module classpath for missing or conflicting dependencies
  api "androidx.appcompat:appcompat:1.1.0"
  api "androidx.lifecycle:lifecycle-extensions:2.2.0"

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${safeExtGet('kotlinVersion', '1.4.21')}"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5'

  api "androidx.browser:browser:1.2.0"

  testImplementation "com.google.truth:truth:1.1.2"
  testImplementation "org.robolectric:robolectric:4.3.1"
  testImplementation 'com.squareup.okhttp3:mockwebserver:4.3.1'
  testImplementation 'androidx.test:core:1.3.0'
}
