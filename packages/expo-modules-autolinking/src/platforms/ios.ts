import glob from 'fast-glob';
import fs from 'fs-extra';
import path from 'path';

import { ModuleDescriptor, PackageRevision, SearchOptions } from '../types';

/**
 * Resolves module search result with additional details required for iOS platform.
 */
export async function resolveModuleAsync(
  packageName: string,
  revision: PackageRevision,
  options: SearchOptions
): Promise<ModuleDescriptor | null> {
  const [podspecFile] = await glob('*/*.podspec', {
    cwd: revision.path,
    ignore: ['**/node_modules/**'],
  });

  if (!podspecFile) {
    return null;
  }

  const podName = path.basename(podspecFile, path.extname(podspecFile));
  const podspecDir = path.dirname(path.join(revision.path, podspecFile));

  return {
    podName,
    podspecDir,
    flags: options.flags,
    modulesClassNames: revision.config?.iosModulesClassNames(),
    appDelegateSubcontractors: revision.config?.iosAppDelegateSubcontractors(),
  };
}

/**
 * Generates Swift file that contains all autolinked Swift packages.
 */
export async function generatePackageListAsync(
  modules: ModuleDescriptor[],
  targetPath: string
): Promise<void> {
  const className = path.basename(targetPath, path.extname(targetPath));
  const generatedFileContent = await generatePackageListFileContentAsync(modules, className);

  await fs.outputFile(targetPath, generatedFileContent);
}

/**
 * Generates the string to put into the generated package list.
 */
async function generatePackageListFileContentAsync(
  modules: ModuleDescriptor[],
  className: string
): Promise<string> {
  const modulesToImport = modules.filter(
    (module) => module.modulesClassNames.length + module.appDelegateSubcontractors.length > 0
  );
  const pods = modulesToImport.map((module) => module.podName);

  const modulesClassNames = []
    .concat(...modulesToImport.map((module) => module.modulesClassNames))
    .filter(Boolean);

  const appDelegateSubcontractors = []
    .concat(...modulesToImport.map((module) => module.appDelegateSubcontractors))
    .filter(Boolean);

  return `/**
 * Automatically generated by expo-modules-autolinking.
 *
 * This autogenerated class provides a list of classes of native Expo modules,
 * but only these that are written in Swift and use the new API for creating Expo modules.
 */

import ExpoModulesCore
${pods.map((podName) => `import ${podName}\n`).join('')}
@objc(${className})
public class ${className}: ModulesProvider {
  public override func getModuleClasses() -> [AnyModule.Type] {
    return ${formatArrayOfClassNames(modulesClassNames)}
  }

  public override func getAppDelegateSubcontractors() -> [AppDelegateSubcontractor.Type] {
    return ${formatArrayOfClassNames(appDelegateSubcontractors)}
  }
}
`;
}

function formatArrayOfClassNames(classNames: string[]): string {
  const indent = '  ';
  return `[${classNames.map((className) => `\n${indent.repeat(3)}${className}.self`).join(',')}
${indent.repeat(2)}]`;
}
